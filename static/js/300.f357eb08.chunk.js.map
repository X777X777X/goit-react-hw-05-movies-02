{"version":3,"file":"static/js/300.f357eb08.chunk.js","mappings":"8WAGAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CAAEC,QAAS,oCAEnC,IAAMC,EAAU,kCAEHC,EAAa,mCAAG,uGACpBH,EAAAA,EAAAA,IAAA,sBAEJI,MAAK,qBAAGC,KAAQC,QACPC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAoBC,EAA3B,EAAcC,YAAd,MAAyC,CACnDH,GAAAA,EACAC,MAAAA,EACAC,OAAQR,EAAUQ,EAHR,GADR,IAOLE,OAAM,SAAAC,GAAW,MAAO,CAAEH,OAAQI,EAElC,KAZwB,2CAAH,qDAebC,EAAY,mCAAG,WAAMC,GAAN,0FACnBhB,EAAAA,EAAAA,IAAA,8BACuBgB,IAC3BZ,MAAK,qBAAGC,KAAQC,QACPC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAoBC,EAA3B,EAAcC,YAAd,MAAyC,CACnDH,GAAAA,EACAC,MAAAA,EACAC,OAAQR,EAAUQ,EAHR,GADR,IAOLE,OAAM,SAAAC,GACL,MAAO,CAAEH,OAAQI,EAClB,KAZuB,2CAAH,sDAeZG,EAAoB,SAAAC,GAC/B,OAAOlB,EAAAA,EAAAA,IAAA,iBACUkB,EADV,MAEJd,MACC,oBACEC,KACEG,EAFJ,EAEIA,GACaE,EAHjB,EAGIC,YACAF,EAJJ,EAIIA,MACcU,EALlB,EAKIC,aACcC,EANlB,EAMIC,aACAC,EAPJ,EAOIA,SACAC,EARJ,EAQIA,OARJ,MAUO,CACLhB,GAAAA,EACAE,OAAQR,EAAUQ,EAClBD,MAAAA,EACAU,YAAa,IAAIM,KAAKN,GAAaO,cACnCL,UAAWM,KAAKC,MAAkB,GAAZP,GACtBE,SAAAA,EACAC,OAAAA,EAjBF,IAoBDZ,OAAM,SAAAC,GACL,MAAO,CAAEH,OAAQI,EAClB,GACJ,EAEYe,EAAoB,SAAAX,GAC/B,OAAOlB,EAAAA,EAAAA,IAAA,iBACUkB,EADV,cAEJd,MAAK,qBAAGC,KAAQyB,KACVvB,KAAI,gBAAGC,EAAH,EAAGA,GAAIuB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAyBC,EAAtC,EAAwBC,aAAxB,MAAmD,CAC1D1B,GAAAA,EACAuB,KAAAA,EACAC,UAAAA,EACAC,MAAOA,EAAQ/B,EAAU+B,EAAQE,EAJ1B,GADL,IAQLvB,OAAM,SAAAC,GACL,MAAO,CAAEH,OAAQI,EAClB,GACJ,EAEYsB,EAAoB,SAAAlB,GAC/B,OAAOlB,EAAAA,EAAAA,IAAA,iBACUkB,EADV,cAEJd,MAAK,qBAAGC,KAAQC,QACPC,KAAI,kBAA8B,CACxCC,GADU,EAAGA,GAEb6B,OAFU,EAAOA,OAGjBC,QAHU,EAAeA,QAAf,GADR,IAOL1B,OAAM,SAAAC,GACL,MAAO,CAAEH,OAAQI,EAClB,GACJ,C,sHC9FYyB,E,OAAmBC,GAAAA,IAAH,sS,SC6B7B,EA1BgB,WACZ,IAAQtB,GAAYuB,EAAAA,EAAAA,IAAU,WAAtBvB,QACR,GAA6BwB,EAAAA,EAAAA,UAAS,IAAtC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACNT,EAAAA,EAAAA,IAAkBlB,GAASd,KAAKwC,EACnC,GAAE,CAAC1B,KAGA,SAACqB,EAAD,UACKI,EAAQG,OAAS,GACd,wBACKH,EAAQpC,KAAI,gBAAGC,EAAH,EAAGA,GAAIuC,EAAP,EAAOA,MAAOT,EAAd,EAAcA,QAAd,OACT,2BACI,wBAAKS,KACL,uBAAIT,MAFC9B,EADA,OAQjB,uBAAG,+CAIlB,C","sources":["api.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\nimport noImage from './components/images/noImage.png';\nimport Error404 from './components/images/Error404.jpeg';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: 'efeda743ab45883687fff04b1ed36428' };\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchTrending = async () => {\n  return axios\n    .get(`/trending/all/day?`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title, poster_path: poster }) => ({\n        id,\n        title,\n        poster: IMG_URL + poster,\n      }))\n    )\n    .catch(error => { return { poster: Error404 };\n      \n    });\n};\n\nexport const fetchByQuery = async query => {\n  return axios\n    .get(`/search/movie?query=${query}`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title, poster_path: poster }) => ({\n        id,\n        title,\n        poster: IMG_URL + poster,\n      }))\n    )\n    .catch(error => {\n      return { poster: Error404 };\n    });\n};\n\nexport const fetchMovieDetails = movieId => {\n  return axios\n    .get(`/movie/${movieId}?`)\n    .then(\n      ({\n        data: {\n          id,\n          poster_path: poster,\n          title,\n          release_date: releaseYear,\n          vote_average: userScore,\n          overview,\n          genres,\n        },\n      }) => ({\n        id,\n        poster: IMG_URL + poster,\n        title,\n        releaseYear: new Date(releaseYear).getFullYear(),\n        userScore: Math.round(userScore * 10),\n        overview,\n        genres,\n      })\n    )\n    .catch(error => {\n      return { poster: Error404 };\n    });\n};\n\nexport const fetchMovieCredits = movieId => {\n  return axios\n    .get(`/movie/${movieId}/credits?`)\n    .then(({ data: { cast } }) =>\n      cast.map(({ id, name, character, profile_path: photo }) => ({\n        id,\n        name,\n        character,\n        photo: photo ? IMG_URL + photo : noImage,\n      }))\n    )\n    .catch(error => {\n      return { poster: Error404 };\n    });\n};\n\nexport const fetchMovieReviews = movieId => {\n  return axios\n    .get(`/movie/${movieId}/reviews?`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, author, content }) => ({\n        id,\n        author,\n        content,\n      }))\n    )\n    .catch(error => {\n      return { poster: Error404 };\n    });\n};\n\n","import styled from 'styled-components';\n\nexport const ReviewsContainer = styled.div`\n  display: flex;\n  padding: 30px;\n  background-color: #3fc50a5b;\n  margin: 20px 30px 30px;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  flex-direction: column;\n  align-items: center;\n`;\n","import { fetchMovieReviews } from \"api\";\nimport { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { ReviewsContainer } from './Reviews.styled';\n\nconst Reviews = () => {\n    const { movieId } = useParams('movieId');\n    const [reviews, setRviews] = useState([]);\n\n    useEffect(() => {\n        fetchMovieReviews(movieId).then(setRviews);\n    }, [movieId]);\n\n    return (\n        <ReviewsContainer>\n            {reviews.length > 0 ? (\n                <ul>\n                    {reviews.map(({ id, autor, content }) => (\n                        <li key={id}>\n                            <h3>{autor}</h3>\n                            <p>{content}</p>\n                        </li>\n                    ))}\n                </ul>\n            ) : (\n                <p>We don't have any reviews for this movie.</p>\n            )}\n        </ReviewsContainer>\n    );\n};\n\nexport default Reviews;"],"names":["axios","api_key","IMG_URL","fetchTrending","then","data","results","map","id","title","poster","poster_path","catch","error","Error404","fetchByQuery","query","fetchMovieDetails","movieId","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","fetchMovieCredits","cast","name","character","photo","profile_path","noImage","fetchMovieReviews","author","content","ReviewsContainer","styled","useParams","useState","reviews","setRviews","useEffect","length","autor"],"sourceRoot":""}